{
    "functions": [
        {
            "type": "function",
            "function": {
                "name": "code_run",
                "description": "Executes a Python script file and returns its output. The script will have access to all agent tools.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "filename": {
                            "type": "string",
                            "description": "Name of the Python script file to execute (must end in .py)"
                        }
                    },
                    "required": [
                        "filename"
                    ]
                }
            }
        },
        {
            "type": "function",
            "function": {
                "name": "code_write",
                "description": "Creates or overwrites a Python script with the provided code. The script will automatically have access to all agent tools through pre-configured imports. \n\nExample usage patterns:\n1. Using the AI tool:\n   from tools import use_ai\n   result = use_ai.execute(\n       messages=[{'role': 'user', 'content': 'Your prompt here'}]\n   )\n\n2. Using web search:\n   from tools import web_search\n   results = web_search.execute(query='Your search query')\n\n3. File operations:\n   from tools import file_read, file_write\n   content = file_read.execute('input.txt')\n   file_write.execute('output.txt', 'new content')\n\n4. Web scraping:\n   from tools import web_scrape\n   content = web_scrape.execute(url='https://example.com', filename='scraped.txt')\n\nThe code will have access to all standard Python libraries plus the agent's tool suite.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "filename": {
                            "type": "string",
                            "description": "Name of the file to write to, including the `.py` extension. Example: 'analysis.py' or 'data_processor.py'"
                        },
                        "code": {
                            "type": "string",
                            "description": "The Python code to write into the file. Can import and use any of the agent's tools:\n- use_ai: For making AI API calls\n- web_search: For searching the web\n- web_scrape: For scraping web content\n- file_read/write/delete: For file operations\n- file_list: For listing directory contents\n\nThe code should be properly indented Python code."
                        }
                    },
                    "required": [
                        "filename",
                        "code"
                    ]
                }
            }
        },
        {
            "type": "function",
            "function": {
                "name": "email_create",
                "description": "Send an HTML email using the Hub's branded template. Perfect for sending announcements, newsletters, or any communication that should have the Hub's professional look.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "to": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            ],
                            "description": "Single email address or list of recipient email addresses"
                        },
                        "subject": {
                            "type": "string",
                            "description": "Subject line of the email"
                        },
                        "content": {
                            "type": "string",
                            "description": "The main content of the email. Can be plain text - will be automatically formatted with the Hub's styling."
                        },
                        "cc": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            ],
                            "description": "Optional - Single email address or list of CC recipients"
                        },
                        "bcc": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            ],
                            "description": "Optional - Single email address or list of BCC recipients"
                        },
                        "from_email": {
                            "type": "string",
                            "description": "Optional - Sender email address. Defaults to Hub's official email."
                        }
                    },
                    "required": [
                        "to",
                        "subject",
                        "content"
                    ]
                }
            }
        },
        {
            "type": "function",
            "function": {
                "name": "file_operations",
                "description": "A secure tool for performing various file system operations including reading, writing, editing files, managing directories, and downloading files from the web.\n\n Important: Supports multiple operations in a single call for related tasks like create directory and move files. Eg \"operations\": [\n        {\n            \"operation\": \"create_directory\",\n            \"path\": \"/data/files/new_folder\"\n        },\n        {\n            \"operation\": \"move_file\",\n            \"source\": \"/data/files/document.md\",\n            \"destination\": \"/data/files/new_folder/renamed.md\"\n        }\n    ]",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "rationale": {
                            "type": "string",
                            "description": "A short comment explaining you rationale and intent for using this operation, eg using write_file to create new.txt as instructed by user"
                        },
                        "operations": {
                            "type": "array",
                            "description": "List of operations to perform in sequence. Use this for related operations like creating a directory and moving files.",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "operation": {
                                        "type": "string",
                                        "enum": [
                                            "read_file",
                                            "read_multiple_files",
                                            "write_file",
                                            "edit_file",
                                            "create_directory",
                                            "list_directory",
                                            "directory_tree",
                                            "move_file",
                                            "download_file",
                                            "search_files",
                                            "get_file_info"
                                        ]
                                    },
                                    "path": {
                                        "type": "string",
                                        "description": "The path to the file or directory involved in the operation."
                                    },
                                    "paths": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        },
                                        "description": "A list of paths for operations that require multiple files."
                                    },
                                    "content": {
                                        "type": "string",
                                        "description": "The content to write to a file."
                                    },
                                    "edits": {
                                        "type": "array",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "oldText": {
                                                    "type": "string",
                                                    "description": "Text to search for - must match exactly."
                                                },
                                                "newText": {
                                                    "type": "string",
                                                    "description": "Text to replace with."
                                                }
                                            },
                                            "required": [
                                                "oldText",
                                                "newText"
                                            ]
                                        },
                                        "description": "A list of edits to apply to a file."
                                    },
                                    "url": {
                                        "type": "string",
                                        "description": "The full URL of the file to download. Must include the protocol (http/https).Example: 'https://example.com/report.pdf'. Files are saved to the /data/files/ directory. Use the `filename` parameter to rename the downloaded file."
                                    },
                                    "filename": {
                                        "type": "string",
                                        "description": "Optional custom filename for the downloaded file. If not provided, the filename will be extracted from the URL. Must only contain alphanumeric characters, dashes, dots, and spaces. Example: 'annual_report_2023.pdf'"
                                    },
                                    "dryRun": {
                                        "type": "boolean",
                                        "default": false,
                                        "description": "Preview changes using git-style diff format."
                                    },
                                    "pattern": {
                                        "type": "string",
                                        "description": "Search pattern for file operations."
                                    },
                                    "excludePatterns": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        },
                                        "description": "Patterns to exclude from search results."
                                    },
                                    "source": {
                                        "type": "string",
                                        "description": "Source path for move operations (absolute path)."
                                    },
                                    "destination": {
                                        "type": "string",
                                        "description": "Destination path for move operations (absolute path)."
                                    }
                                },
                                "required": [
                                    "operation"
                                ]
                            }
                        }
                    }
                }
            },
            "direct_stream": false
        },
        {
            "type": "function",
            "function": {
                "name": "get_advice",
                "description": "Get advice from a specified advisor based on the given query posed by a user",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "advisor_name": {
                            "type": "string",
                            "description": "The name of the advisor you think is best suited to the task of answering the user's query (e.g., 'Naval_Ravikant').",
                            "enum": [
                                "Naval_Ravikant",
                                "Chris_Voss",
                                "Charlie_Munger",
                                "Steve_Jobs",
                                "Yuval_Harari",
                                "Charlie_Munger",
                                "Daniel_Kahneman",
                                "Elon_Musk",
                                "Jim_Collins",
                                "Nassim_Taleb",
                                "Peter_Thiel",
                                "Shane_Parrish",
                                "Matt_Ridley",
                                "David_Deutsch"
                            ]
                        },
                        "query": {
                            "type": "string",
                            "description": "The query or message seeking advice"
                        },
                        "provide_latest_news": {
                            "type": "boolean",
                            "description": "This parameter determines whether the advisor should be given contemporary information to help them answer the user. Most advisor's are provided with detailed content from books, eg their biographies, to help ground their answers. Most of those books will not include contemporary information about the latest news and happenings. For example, if the advisor Steve Jobs is asked about the latest model of the iPhone, this parameter should be 'true' such that his book content can be supplemented with the latest news to enable him to answer questions on current issues. If the user's question does not involve contemporary issues then the parameter should be 'false'. The default for this parameter should be 'false'",
                            "default": false
                        }
                    },
                    "required": [
                        "advisor_name",
                        "query"
                    ]
                }
            },
            "direct_stream": true
        },
        {
            "type": "function",
            "function": {
                "name": "get_company_updates",
                "description": "Fetch the recent LinkedIn updates posted by a given list of companies",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "post_count": {
                            "type": "integer",
                            "description": "Number of recent posts to fetch per company. Always use 5"
                        }
                    },
                    "required": []
                }
            }
        },
        {
            "type": "function",
            "function": {
                "name": "get_current_weather",
                "description": "Provide the current weather for a given location when asked by a user",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "location": {
                            "type": "string",
                            "description": "The city and state that the user mentions, e.g. San Francisco, CA"
                        },
                        "unit": {
                            "type": "string",
                            "description": "The temperature units to use. Note always use celsius as a default.",
                            "enum": [
                                "celsius",
                                "fahrenheit"
                            ]
                        }
                    },
                    "required": [
                        "location"
                    ]
                }
            }
        },
        {
            "type": "function",
            "function": {
                "name": "get_hacker_news",
                "description": "Retrieve and summarize the top headlines from Hacker News",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "limit": {
                            "type": "integer",
                            "description": "Number of headlines to retrieve",
                            "minimum": 10,
                            "maximum": 30,
                            "default": 20
                        }
                    },
                    "required": []
                }
            },
            "direct_stream": true
        },
        {
            "type": "function",
            "function": {
                "name": "get_news",
                "description": "Use this tool if you need to get up to date news from the web about a specific subject or topic. This tool provides the latest news and works best with a detailed search query. Make sure to rephrase the user's question as a detailed search_query",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "search_query": {
                            "type": "string",
                            "description": "A detailed search query to use for the news search, e.g. 'provide the current major news updates about artificial intelligence'"
                        }
                    },
                    "required": [
                        "search_query"
                    ]
                }
            },
            "direct_stream": true
        },
        {
            "type": "function",
            "function": {
                "name": "get_research",
                "description": "This tool is a very intelligent web research agent that can search, find, gather and synthesise highly relevant information for a given topic. Use this tool whenever you are asked to perform research on topic. You simply give the agent a research_brief in natural language, eg 'please research the spacex starship launch schedule'. It will return a comprehensive research dossier for you to use in your answers.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "research_brief": {
                            "type": "string",
                            "description": "The initial research brief query to use for the research, based on the user's message. Determine the intent and rephrase to get the best possible results. Be careful not to change key terms for example don't assume a given term is a typo when the user may have meant to use that term. Eg if the user mentions an org name, be careful not to change the org name in your research brief."
                        }
                    },
                    "required": [
                        "research_brief"
                    ]
                }
            },
            "direct_stream": true
        },
        {
            "type": "function",
            "function": {
                "name": "get_transcription",
                "description": "Download captions and transcript from a YouTube video, with optional AI-powered summarization",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "video_url": {
                            "type": "string",
                            "description": "The URL of the YouTube video to transcribe"
                        }
                    },
                    "required": [
                        "video_url"
                    ]
                }
            },
            "direct_stream": true
        },
        {
            "type": "function",
            "function": {
                "name": "get_tweets",
                "description": "Get the latest tweets from a given Twitter list",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "list_id": {
                            "type": "string",
                            "description": "The id of the twitter list to fetch tweets for"
                        },
                        "max_pages": {
                            "type": "integer",
                            "description": "The maximum number of pages to page through in the twitter api call. It is approximately 3 pages of tweets per day so if the user asks for the last week, it would be 21 pages, if they ask for today, it would be 3. Never more than 21"
                        }
                    },
                    "required": [
                        "list_id",
                        "max_pages"
                    ]
                }
            }
        },
        {
            "type": "function",
            "function": {
                "name": "get_website",
                "description": "Get the definitive website url for a given term",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "The search query to execute, based on the user's message. Determine the intent and rephrase to get the best possible results."
                        }
                    },
                    "required": [
                        "query"
                    ]
                }
            }
        },
        {
            "type": "function",
            "function": {
                "name": "get_wikipedia",
                "description": "Retrieve comprehensive Wikipedia content for a given search term and use that content to provide an information dense response to the user. Response MUST be >500 words",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "term": {
                            "type": "string",
                            "description": "The search term to look up on Wikipedia."
                        }
                    },
                    "required": [
                        "term"
                    ]
                }
            }
        },
        {
            "type": "function",
            "function": {
                "name": "handoff_to_agent",
                "description": "Use this to hand off work to another agent when their expertise is needed",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "agent_name": {
                            "type": "string",
                            "description": "The name of the agent to hand off to (in lower case)"
                        },
                        "handoff": {
                            "type": "string",
                            "description": "A comprehensive briefing message that explains what work you want the target agent to perform."
                        }
                    },
                    "required": [
                        "agent_name",
                        "handoff"
                    ]
                }
            }
        },
        {
            "type": "function",
            "function": {
                "name": "handoff_to_coordinator",
                "description": "Use this to hand work back to the coordinator agent when you have completed your part",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "work_done": {
                            "type": "string",
                            "description": "The complete output from the work you have done, to pass to the coordinator agent"
                        },
                        "handoff": {
                            "type": "string",
                            "description": "The message explaining what work you have done, for the coordinator agent"
                        }
                    },
                    "required": [
                        "work_done",
                        "handoff"
                    ]
                }
            }
        },
        {
            "type": "function",
            "function": {
                "name": "linkedin_bio_writer",
                "description": "Generate a professional biography from a LinkedIn profile",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "profile_url": {
                            "type": "string",
                            "description": "LinkedIn profile URL (format: https://www.linkedin.com/in/username)"
                        }
                    },
                    "required": [
                        "profile_url"
                    ]
                }
            },
            "direct_stream": true
        },
        {
            "type": "function",
            "function": {
                "name": "linkedin_research",
                "description": "This tool performs comprehensive LinkedIn research on a person or company, collecting profile data and posts, analyzing them, and providing detailed insights.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "brief": {
                            "type": "string",
                            "description": "A description of the person or company to research on LinkedIn. Be specific to ensure accurate matching."
                        }
                    },
                    "required": [
                        "brief"
                    ]
                }
            }
        },
        {
            "type": "function",
            "function": {
                "name": "make_artifact",
                "description": "Generate self-contained HTML artifacts (widgets) with embedded JavaScript and CSS",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "html_content": {
                            "type": "string",
                            "description": "The HTML content of the artifact"
                        }
                    },
                    "required": [
                        "html_content"
                    ]
                }
            }
        },
        {
            "type": "function",
            "function": {
                "name": "make_book",
                "description": "Generate a complete book with multiple chapters on any topic using AI. The tool handles research, writing, and formatting.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "topic": {
                            "type": "string",
                            "description": "The main topic or subject for the book"
                        },
                        "output_file": {
                            "type": "string",
                            "description": "Optional: The output file path for the generated book (default: book.md)"
                        }
                    },
                    "required": [
                        "topic"
                    ]
                }
            }
        },
        {
            "type": "function",
            "function": {
                "name": "use_ai",
                "description": "Makes a call to an AI language model API with specified messages and model selection. Importantly, this tool supports file inclusion in message content using special syntax. \n\nKey Features:\n1. File Inclusion: Use <$filename$> syntax to include file contents\n2. Directory Inclusion: Use <$dir:pattern$> for multiple files\n3. Context Preservation: Include previous results or conversation history\n\nCommon Usage Patterns:\n1. Including previous results:\n   - Save results to file: <$files/search_results.txt$>\n   - Reference context: <$files/conversation_history.txt$>\n2. Processing data files:\n   - Analyze data: <$files/data.json$>\n   - Process logs: <$files/app.log$>\n3. Multi-file analysis:\n   - Include multiple files: <$dir:files/*.txt$>\n\nExample Messages:\n```python\nmessages=[\n    {\"role\": \"system\", \"content\": \"You are analyzing data from previous steps: <$files/analysis.txt$>\"},\n    {\"role\": \"user\", \"content\": \"Based on these search results: <$files/search_results.txt$>, please...\"}\n]\n```",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "model": {
                            "type": "string",
                            "description": "The model to use. Default options include:\n- 'openai/gpt-4o-mini' for general use\n- 'perplexity/llama-3.1-sonar-huge-128k-online' for web search tasks\n- 'google/gemini-2.0-flash-001' for large context tasks",
                            "default": "openai/gpt-4o-mini"
                        },
                        "messages": {
                            "type": "array",
                            "description": "Array of message objects with 'role' and 'content' keys. The content field supports special file inclusion syntax:\n1. Single file: <$filename$> - includes contents of the specified file\n2. Multiple files: <$dir:pattern$> - includes all matching files\n3. Datetime: <$datetime$> or <$datetime:format$>\n\nExamples:\n- {\"role\": \"user\", \"content\": \"Analyze this data: <$files/data.txt$>\"}\n- {\"role\": \"system\", \"content\": \"Use context from: <$files/previous_step.txt$>\"}\n- {\"role\": \"user\", \"content\": \"Process these logs: <$dir:files/logs/*.log$>\"}",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "role": {
                                        "type": "string",
                                        "enum": [
                                            "system",
                                            "user",
                                            "assistant"
                                        ],
                                        "description": "The role of the message sender (system, user, or assistant)"
                                    },
                                    "content": {
                                        "type": "string",
                                        "description": "The message content. Can include file references using <$filename$> syntax.\nExamples:\n- 'Based on these results: <$files/results.txt$>'\n- 'Analyze all logs: <$dir:files/logs/*.txt$>'\n- 'Current time: <$datetime:%Y-%m-%d %H:%M:%S$>'"
                                    }
                                },
                                "required": [
                                    "role",
                                    "content"
                                ]
                            }
                        },
                        "temperature": {
                            "type": "number",
                            "description": "Controls randomness in the response (0.0 to 1.0)",
                            "default": 0.7,
                            "minimum": 0.0,
                            "maximum": 1.0
                        },
                        "max_tokens": {
                            "type": "integer",
                            "description": "Maximum length of response. If not specified, model default is used.",
                            "minimum": 1
                        }
                    },
                    "required": [
                        "messages"
                    ]
                }
            }
        },
        {
            "type": "function",
            "function": {
                "name": "use_brainstorm",
                "description": "Generate creative ideas using various brainstorming techniques. Respond with a clean markdown format that presents the ideas in the most useful format for the user. Methods: Reverse brainstorming involves identifying ways to cause a problem or achieve the opposite effect. Perfect for spotting potential issues and coming up with innovative solutions. Role storming adopting the perspective of someone else to generate ideas. Great for gathering insights from different viewpoints. SCAMPER stands for Substitute, Combine, Adapt, Modify, Put to another use, Eliminate, and Reverse. It encourages thinking from multiple perspectives to generate diverse ideas. Edward de Bono, looks at a problem from six different perspectives - White (Data), Red (Emotions), Black (Risks), Yellow (Benefits), Green (Creativity), and Blue (Process management). Focuses on generating questions rather than answers using the 5 W's and 1 H (Who, What, Where, When, Why, How). Ideal for comprehensive topic exploration.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "brief": {
                            "type": "string",
                            "description": "The topic, question, or problem to brainstorm about"
                        },
                        "method": {
                            "type": "string",
                            "description": "The brainstorming method to use (defaults to six_hats).",
                            "enum": [
                                "big_mind_mapping",
                                "reverse_brainstorming",
                                "role_storming",
                                "scamper",
                                "six_hats",
                                "starbursting"
                            ]
                        }
                    },
                    "required": [
                        "brief"
                    ]
                }
            },
            "direct_stream": true
        },
        {
            "type": "function",
            "function": {
                "name": "use_github",
                "description": "Interact with GitHub repositories to perform various operations like searching repos, getting file contents, managing PRs and issues, etc. Repository information can be provided via URL or owner/repo parameters. Can also analyze repositories and answer questions about them.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "operation": {
                            "type": "string",
                            "description": "The GitHub operation to perform",
                            "enum": [
                                "search_repositories",
                                "get_repo_details",
                                "get_file_content",
                                "list_pull_requests",
                                "get_pull_request",
                                "list_repo_issues",
                                "create_issue_comment",
                                "get_directory_structure",
                                "check_github_diff",
                                "update_file",
                                "create_branch",
                                "create_pull_request",
                                "ask",
                                "check_if_starred",
                                "list_starred_repos",
                                "create_gist"
                            ]
                        },
                        "params": {
                            "type": "object",
                            "description": "Parameters specific to the chosen operation. You can provide either 'url' OR 'owner'/'repo' parameters:\n\nURL format: params.url = 'https://github.com/owner/repo'\n\nRequired parameters by operation:\n- search_repositories: query\n- get_repo_details: url OR (owner, repo)\n- get_file_content: (url OR (owner, repo)) AND path\n- list_pull_requests: url OR (owner, repo)\n- get_pull_request: (url OR (owner, repo)) AND pull_number\n- list_repo_issues: url OR (owner, repo)\n- create_issue_comment: (url OR (owner, repo)) AND issue_number, body\n- get_directory_structure: url OR (owner, repo)\n- check_github_diff: (url OR (owner, repo)) AND base, head\n- update_file: (url OR (owner, repo)) AND path, content, message, branch\n- create_branch: (url OR (owner, repo)) AND branch_name\n- create_pull_request: (url OR (owner, repo)) AND title, body, head, base\n- ask: url AND question\n- check_if_starred: (owner, repo)\n- list_starred_repos: no parameters required\n- create_gist: description, files, public (optional)",
                            "properties": {
                                "url": {
                                    "type": "string",
                                    "description": "GitHub repository URL. Example: 'https://github.com/microsoft/vscode'"
                                },
                                "query": {
                                    "type": "string",
                                    "description": "Search query string for repositories. Example: 'language:python stars:>1000'"
                                },
                                "sort": {
                                    "type": "string",
                                    "description": "Sort criteria for repository search",
                                    "enum": [
                                        "stars",
                                        "forks",
                                        "help-wanted-issues",
                                        "updated"
                                    ],
                                    "default": "stars"
                                },
                                "max_results": {
                                    "type": "integer",
                                    "description": "Maximum number of results to return",
                                    "default": 10
                                },
                                "owner": {
                                    "type": "string",
                                    "description": "Repository owner/organization name. Example: 'microsoft'"
                                },
                                "repo": {
                                    "type": "string",
                                    "description": "Repository name. Example: 'vscode'"
                                },
                                "path": {
                                    "type": "string",
                                    "description": "Path to the file within the repository. Example: 'docs/README.md'"
                                },
                                "content": {
                                    "type": "string",
                                    "description": "Content to write to the file. For binary files, this should be base64 encoded."
                                },
                                "message": {
                                    "type": "string",
                                    "description": "Commit message for file updates. Example: 'Update README.md'"
                                },
                                "branch": {
                                    "type": "string",
                                    "description": "Branch name for file operations or PR creation. Example: 'feature/new-docs'"
                                },
                                "state": {
                                    "type": "string",
                                    "description": "State of PRs/issues to return",
                                    "enum": [
                                        "open",
                                        "closed",
                                        "all"
                                    ],
                                    "default": "open"
                                },
                                "pull_number": {
                                    "type": "integer",
                                    "description": "Pull request number to fetch details for. Example: 123"
                                },
                                "title": {
                                    "type": "string",
                                    "description": "Title for the pull request. Example: 'Add new feature'"
                                },
                                "body": {
                                    "type": "string",
                                    "description": "Description/body text for pull request or issue comment. Supports markdown."
                                },
                                "head": {
                                    "type": "string",
                                    "description": "Head reference to compare against base. Example: 'feature/new-docs'"
                                },
                                "base": {
                                    "type": "string",
                                    "description": "Base reference (commit SHA, branch, or tag) for comparison. Example: 'main'"
                                },
                                "issue_number": {
                                    "type": "integer",
                                    "description": "Issue number for commenting. Example: 456"
                                },
                                "branch_name": {
                                    "type": "string",
                                    "description": "Name for the new branch to create. Example: 'feature/new-docs'"
                                },
                                "question": {
                                    "type": "string",
                                    "description": "Question to ask about the repository. Example: 'How does the authentication system work?'"
                                },
                                "description": {
                                    "type": "string",
                                    "description": "Description for the gist"
                                },
                                "files": {
                                    "type": "object",
                                    "description": "Dictionary of filename to file content. Example: {'example.txt': {'content': 'Hello World'}"
                                },
                                "public": {
                                    "type": "boolean",
                                    "description": "Whether the gist should be public",
                                    "default": true
                                }
                            }
                        }
                    },
                    "required": [
                        "operation",
                        "params"
                    ]
                }
            }
        },
        {
            "type": "function",
            "function": {
                "name": "use_knowledge",
                "description": "Selects relevant documents and spreadsheets from a knowledge base based on a query and combines them into a single file",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "The user's query or task description"
                        }
                    },
                    "required": [
                        "query"
                    ]
                }
            }
        },
        {
            "type": "function",
            "function": {
                "name": "use_notion",
                "description": "The use_notion tool allows you to interact with Notion by either creating new pages or fetching existing page content.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "operation": {
                            "type": "string",
                            "description": "Specify the action to perform: 'create_page' to add a new page or 'fetch_content' to retrieve content from an existing page.",
                            "enum": [
                                "create_page",
                                "fetch_content"
                            ]
                        },
                        "page_id": {
                            "type": "string",
                            "description": "The unique identifier for the Notion page. Required for both creating and fetching content. Use the default if not specified: '6aa23cc62c2e4a3cbda8d8e7cfc9b5ca' for notes, '15ecd0ff08558020a58cd4b48a9b4d34' for advice.",
                            "enum": [
                                "15ecd0ff08558020a58cd4b48a9b4d34",
                                "6aa23cc62c2e4a3cbda8d8e7cfc9b5ca"
                            ],
                            "default": "15ecd0ff08558020a58cd4b48a9b4d34"
                        },
                        "title": {
                            "type": "string",
                            "description": "The title for the new page. Required when creating a new page. Generate a title based on the content to be added."
                        },
                        "content": {
                            "type": "string",
                            "description": "The markdown content for the new page. Required when creating a new page. Create content based on the user's instructions."
                        }
                    },
                    "required": [
                        "operation",
                        "page_id"
                    ]
                }
            },
            "direct_stream": true
        },
        {
            "type": "function",
            "function": {
                "name": "use_sequential_thinking",
                "description": "A tool for dynamic, reflective, and self-directed sequential reasoning. It stores a chain of thoughts, supports revisions and branching, and can optionally suggest next steps using an LLM if needed.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "thought": {
                            "type": "string",
                            "description": "Your current thinking step"
                        },
                        "nextThoughtNeeded": {
                            "type": "boolean",
                            "description": "Whether another thought step is needed"
                        },
                        "thoughtNumber": {
                            "type": "integer",
                            "description": "Current thought number (>=1)"
                        },
                        "totalThoughts": {
                            "type": "integer",
                            "description": "Estimated total thoughts needed (>=1)"
                        },
                        "isRevision": {
                            "type": "boolean",
                            "description": "Whether this is a revision of a previous thought"
                        },
                        "revisesThought": {
                            "type": "integer",
                            "description": "Which thought number is being revised"
                        },
                        "branchFromThought": {
                            "type": "integer",
                            "description": "If branching, which thought number is the source"
                        },
                        "branchId": {
                            "type": "string",
                            "description": "Identifier for the current branch"
                        },
                        "needsMoreThoughts": {
                            "type": "boolean",
                            "description": "If we realize we need more thoughts than originally estimated"
                        }
                    },
                    "required": [
                        "thought",
                        "nextThoughtNeeded",
                        "thoughtNumber",
                        "totalThoughts"
                    ]
                }
            },
            "direct_stream": true
        },
        {
            "type": "function",
            "function": {
                "name": "use_todo_list",
                "description": "Use a todo list to keep track of activities. You can use `create` to create a new todo list, optionally with initial items. Use `read` to read a given todo list by passing in the id. Use `update` to update the state of the todo list, eg by marking an item as 'done'. Each item follows a structured schema with id, todo (markdown description), done (boolean status), and note (contextual information).",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "operation": {
                            "type": "string",
                            "enum": [
                                "create",
                                "read",
                                "update"
                            ],
                            "description": "The operation to perform: create, read, or update the todo list"
                        },
                        "todo_id": {
                            "type": "string",
                            "description": "The ID of the todo list you wish to use read or update"
                        },
                        "items": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "todo": {
                                        "type": "string",
                                        "description": "Markdown description of the task"
                                    },
                                    "done": {
                                        "type": "boolean",
                                        "description": "Whether the task is completed"
                                    },
                                    "note": {
                                        "type": "string",
                                        "description": "Contextual information about the task status"
                                    }
                                },
                                "required": [
                                    "todo"
                                ]
                            },
                            "description": "List of todo items following the structured schema. Can be used when creating a new list or updating an existing one."
                        }
                    },
                    "required": [
                        "operation"
                    ]
                }
            }
        },
        {
            "type": "function",
            "function": {
                "name": "web_image_search",
                "description": "Perform an image search to find the best matching image for a given user request",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "Search query for images. Make sure to take a deep breath and think carefully about what the user is trying to achieve with their brief, thenthink step by step about what image search query is likely to generate the most useful results"
                        },
                        "count": {
                            "type": "integer",
                            "description": "Number of images to return (use default 10, max 20)"
                        }
                    },
                    "required": [
                        "query"
                    ]
                }
            }
        },
        {
            "type": "function",
            "function": {
                "name": "web_read_page",
                "description": "Fetches and returns a clean markdown version of a webpage.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "url": {
                            "type": "string",
                            "description": "The URL of the webpage to read and convert to markdown"
                        }
                    },
                    "required": [
                        "url"
                    ]
                }
            }
        },
        {
            "type": "function",
            "function": {
                "name": "web_scrape",
                "description": "Fetches and extracts textual content from a specified URL and saves it to a file. The content is saved in markdown format with proper formatting and structure. Use this tool to gather information from web pages for learning, data analysis, or incorporating external knowledge into your responses. This is helpful when you need to access the latest information or data not available in your existing knowledge base.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "url": {
                            "type": "string",
                            "description": "The full URL of the website to scrape content from. Must include the protocol (e.g., 'http://' or 'https://'). Ensure the URL is correct and accessible."
                        },
                        "filename": {
                            "type": "string",
                            "description": "The name of the file to save the scraped content to. Can include subdirectories, e.g., 'scraped_data/webpage.txt'. Directories will be created if they don't exist. Content will be saved in markdown format."
                        }
                    },
                    "required": [
                        "url",
                        "filename"
                    ]
                }
            }
        },
        {
            "type": "function",
            "function": {
                "name": "web_search",
                "description": "Performs a comprehensive web search using multiple search providers (Brave, Tavily, DuckDuckGo, etc.). The tool optimizes the search query using AI and returns ranked results. Use this tool when you need to find current information about any topic, verify facts, or gather data from multiple sources. Results include titles, URLs, and descriptions from various web pages.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "The search query or research objective. Can be a natural language question or description of what you're looking for. The query will be optimized automatically for best results."
                        },
                        "max_results": {
                            "type": "integer",
                            "description": "Maximum number of search results to return. Default is 10. The actual number might be lower depending on available results.",
                            "default": 10
                        }
                    },
                    "required": [
                        "query"
                    ]
                }
            }
        }
    ]
}